---
  title: Osa 1
  exercise_page: true
  quiz_page: true
  published: true
---


<% partial 'partials/material_heading' do %>
  Johdanto
<% end %>

<p>
  Ohjelmointi on nykyajan käsityöläistaito ja ohjelmointia työkseen tai harrastuksekseen tekevien määrä on jatkuvasti kasvussa. Ohjelmistojen ja ohjelmien lähdekoodin tallentamispalvelua tarjoava <a href="https://github.com/" target="_blank" norel>GitHub</a> arvioi vuonna 2016 palvelun käyttäjien määräksi yli 20 miljoonaa, mutta -- koska kaikki ohjelmoijat eivät käytä kyseistä palvelua -- ohjelmoijia on todennäköisesti hyvin paljon enemmän. Tämän modernin käsityöläistaidon tarve työelämässä on akuutti -- esimerkiksi Tivi uutisoi 2016 aiheesta otsikolla "<a href="http://www.tivi.fi/Kaikki_uutiset/it-osaaja-paasee-toihin-vaikka-heti-6555159" target="_blank" norel>It-osaaja pääsee töihin vaikka heti</a>". Samalla tiede perustuu yhä enemmän datan analyysissä käytettäviin ohjelmistoihin sekä ohjelmistoalan innovaatioihin. Esimerkiksi meteorologit, fyysikot ja kemistit käyttävät ohjelmistoja ja ohjelmoivat työssään. Myös kasvatustiede ja opetusala yleisemmin hyödyntää yhä enemmän digitalisaation tuomia mahdollisuuksia.
</p>

<p>
  Ohjelmoinnin opettelua harkitseva tietää harvion mikä kaikki yhteiskunnassamme nojautuu ohjelmoijien tuottamiin ohjelmistoihin. Ilman ohjelmointia yhteydenpito, kaupankäynti, matkustaminen, terveydenhuolto ja niin edelleen olisivat yksinkertaisesti heikommalla tasolla. Puhelimet eivät toimisi, verkkopankkeja saatika pankki- ja luottokortteja ei olisi, matkojen varaaminen ja henkilöasiakirjojen käyttäminen ei onnistuisi verkon yli, lääketeollisuus ei pystyisi käymään suuria massoja dataa läpi parannuskeinoja etsimisessä, tiedon hakeminen tapahtuisi sana- ja tietokirjoista ja niin edelleen. <a href="https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)" target="_blank" norel>Margaret Hamilton</a> ei olisi myöskään koskaan kirjoittanut ohjelmaa, joka auttoi avaruuteen pääsemisessä ja kuulennossa.
</p>

<p>
  Tällä kurssilla otat ensiaskeleet ohjelmointiin. Opit kirjoittamaan ohjelmia ja ymmärtämään niiden toimintaa. Kurssin jälkeen katsot yhteiskunnan palveluita myös ohjelmoijan näkökulmasta ja tiedät, että palvelut toimivat (tai ovat rikki!) ohjelmistojen ansiosta.
</p>

<% partial 'partials/hint', locals: { name: 'Ensimmäisen osan tavoitteet' } do %>


  <p>
    Ensimmäisessä osan jälkeen tunnet ohjelmoinnin peruskäsitteitä sekä niiden toimintaa. Tunnet muuttujat, ehtolauseet, sekä toistolauseet ja osaat kirjoittaa näitä käyttäviä ohjelmia. Ymmärrät ohjelman suoritusjärjestyksen, ja osaat kirjoittaa ohjelmia, jotka lukevat käyttäjältä syötettä. Osaat käsitellä käyttäjän kirjoittamaa syötettä ja tehdä sen perusteella laskentaa.
  </p>

<% end %>

<%= partial 'partials/quiz', locals: { id: '59adb85e98b5730004cda2c4' } %>


<% partial 'partials/material_heading' do %>
  Ohjelma ja lähdekoodi
<% end %>

<p>
  <strong>Ohjelma</strong> on järjestetty joukko käskyjä, joita tietokone noudattaa yksi kerrallaan.
</p>

<p>
  Nykypäivänä ohjelmoijat eivät ohjelmoi tietokoneen noudattamaksi tarkoitettuja käskyjä käyttäen. Ohjelmoinnissa käytetään ihmisen kirjoitettavaksi ja luettavaksi tarkoitettua ohjelmointikieltä, kuten tällä kurssilla käytettyä <a href="https://en.wikipedia.org/wiki/Java_(programming_language)" target="_blank" rel="noopener">Java</a>a. Ohjelmoijan kirjoittamaa ohjelmakoodia kutsutaan <strong>lähdekoodiksi</strong>. Lähdekoodi käännetään ohjelmointikielen- ja ohjelmointiympäristön tarjoamien työvälineiden avulla konekieliseksi ohjelmaksi, jonka käskyjä tietokone noudattaa.
</p>

<p>
  Lähdekoodi koostuu lauseista (statement) ja lausekkeista (expression), joita Java-kielessä voidaan lukea rivi riviltä ylhäältä alaspäin ja vasemmalta oikealle. Esimerkiksi tekstin "Hei maailma" tulostuksessa käytetään Java-ohjelmointikielellä lausetta:
</p>

<% partial 'partials/code_highlight' do %>
  System.out.println("Hei maailma");
<% end %>

<p>
  Lause <code>System.out.println</code> on Java-ohjelmointikielen valmiiksi tarjoama komento, jota käytetään merkkijonon tulostamiseen. Komento käytännössä käskee tietokonetta tulostamaan sille sulkeiden sisällä hipsuissa annetun merkkijonon. Komennon pääte <code>ln</code> on lyhenne sanasta <em>line</em>, eli komentoa käyttämällä merkkijonon jälkeen tulostetaan myös rivinvaihto.
</p>

<p>
  Lauseen loppuun kirjoitetaan puolipiste <code>;</code>.
</p>

<% partial 'partials/material_sub_heading' do %>
  Ohjelmarunko
<% end %>

<p>
  Java-ohjelmat vaativat toimiakseen kurssin aikana tutuksi tulevan rungon. Ohjelman runko on seuraavanlainen.
</p>

<% partial 'partials/code_highlight' do %>
public class Esimerkki {
    public static void main(String[] args) {

        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        System.out.println("Tulostettava teksti");

    }
}
<% end %>


<p>
  <strong>
    Ohjelmoidessa yhdenkin merkin puuttuminen voi johtaa virhetilanteeseen. Ohjelmoija saattaa vahingossa esimerkiksi syöttää pilkun pisteen sijaan, kirjoittaa vaikkapa <code>printin</code> sanan <code>println</code> sijaan, tai jättää tulostettavasta merkkijonosta hipsut pois. Jokainen em. virheistä johtaa tilanteeseen, missä ohjelman suoritus ei onnistu.
  </strong>
</p>

<div class="typonator-widget">
  <div class="typonator-model-source">
public class Esimerkki {
    public static void main(String[] args) {
        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        System.out.println("Tulostettava teksti");
    }
}
  </div>
  <div class="typonator-template-source">
public class Esimerkki {
    public static void main(String[] args) {
        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        // MARK
    }
}
  </div>
</div>

<p>
  Ohjelmarunko sisältää Java-ohjelmointikielelle oleellisia osia. Eri ohjelmointikielillä on erilainen ohjelmarunko. Tulemme myöhemmin tustumaan tarkemmin sanojen <code>public class</code> ja <code>public static void</code> merkitykseen.
</p>

<p>
  Ohjelman suoritus alkaa riviä <code>public static void main(String[] args) {</code> seuraavalta riviltä ja päättyy sulkevaan aaltosulkuun <code>}</code>. Lauseet suoritetaan yksi kerrallaan. Tällä hetkellä ainoa suoritettava lause on <em>System.out.println("Tulostettava teksti");</em>, mikä tulostaa tekstin "Tulostettava teksti".
</p>

<p>
  Jatkossa materiaalin esimerkeissä ei aina erikseen näytetä ohjelmarunkoa, mutta voit olettaa, että se tarvitaan.
</p>

<p>
  Alla on kurssin ensimmäinen ohjelmointitehtävä. Ohjelmointitehtävät tehdään kurssilla käytössä olevassa Test My Code -ohjelmointiympäristössä, mutta tehtävänannot ovat kurssimateriaalissa. Saat tehtävänannon auki klikkaamalla alla olevaa otsikkoa "Ada Lovelace":
</p>


<% partial 'partials/hint', locals: { name: 'Ohjelmoinnin aloittaminen' } do %>

  <p>
    Ohjelmoinnin aloittamiseen tarvitset seuraavat asiat.
  </p>

  <ol>
    <li>
      Käyttäjätunnuksen kurssilla käytettyyn TMC-järjestelmään (käytä käyttäjätunnuksena opiskelijanumeroasi).
    </li>
    <li>
      Javan (Java JDK).
    </li>
    <li>
      NetBeans with TMC-ohjelmointiympäristön.
    </li>
  </ol>

  <p>
    Edellisten tekemiseen ja asentamiseen löytyy ohjeet kurssin Johdannosta.
  </p>

  <p>
    Seuraavalla videolla näytetään miten tehtävien tekeminen ja palauttaminen NetBeansilla ja TMC:llä tapahtuu. Video perustuu hieman aiempaan kurssiin, joten tehtävä ei ole täysin identtinen nykyisen kurssin ensimmäisen tehtävän kanssa.
  </p>

  <p>
    Toisin kuin videolla, tällä kurssilla palvelimen osoite on <code>https://tmc.mooc.fi/org/hy/courses/243</code> ja kurssin tunnus on <code>hy-ohpe-s17</code>.
  </p>

  <iframe width="420" height="315" src="//www.youtube.com/embed/sQYq2LISMRU" frameborder="0" allowfullscreen=""></iframe>
  
<% end %>


<% partial 'partials/exercise', locals: { name: 'Ada Lovelace' } do %>


  <p>
    Tehtäväpohjassa on seuraavanlainen ohjelmarunko:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Nimi {

    public static void main(String[] args) {
        // Kirjoita ohjelmasi tähän alle

    }
}
  <% end %>

  <p>
    Rivi "// Kirjoita ohjelmasi tähän alle" on <em>kommenttirivi</em>, jota tietokone ei ota huomioon ohjelmaa suoritettaessa. Lisää kommenttirivin alle lause, joka tulostaa merkkijonon "Ada Lovelace" ja suorita ohjelma. Ohjelman tulostuksen tulee olla seuraavanlainen:
  </p>

  <% partial 'partials/sample_output' do %>
    Ada Lovelace
  <% end %>

  <p>
    Kun olet tehnyt tehtävän ja huomaat, että ohjelma tulostaa halutun merkkijonon, palauta tehtävä TMC:lle. Tutustu tämän jälkeen halutessasi lisää <a href="https://en.wikipedia.org/wiki/Ada_Lovelace" target="_blank" rel="noopener">Ada Lovelaceen</a>, joka oli yksi ensimmäisistä ohjelmoijista.
  </p>

<% end %>



<% partial 'partials/hint', locals: { name: 'Lähdekoodin sijainti' } do %>

  <p>
    Lähdekoodi ladataan ja tallennetaan tietokoneen kovalevylle. Näet lähdekoodin tarkemman sijainnin klikkaamalla projektin nimeä (esim. Osa01_01.AdaLovelace) hiiren oikealla näppäimellä ja valitsemalla Properties. Tämä avaa projektiin liittyvän asetusikkunan. Ikkunan Sources-valikossa löytyy tieto projektin kansiosta (Project Folder).
  </p>

  <p>
    Kyseiseen kansioon voi mennä myös ilman NetBeansia. Huomaat, että projektin kansiossa on useita tiedostoja. Lähdekoodit, joita muokkaamme ja luomme tällä kurssilla sijaitsevat aina kansiossa <em>src</em> eli sources.
  </p>

  <p>
    Java-kielisten lähdekooditiedostojen nimi päättyy merkkijonoon <em>.java</em>. Tiedoston nimi on ohjelmarungon <code>public class</code> -avainsanoja seuraava merkkijono. Esimerkiksi jos ohjelma alkaa sanoilla <code>public class Esimerkki</code>, tulee siihen liittyvän lähdekoodin sijaita tiedostossa <code>Esimerkki.java</code>.
  </p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Ohjelman osia
<% end %>


<% partial 'partials/material_sub_sub_heading' do %>
  Kommentit
<% end %>


<p>
  Lähdekoodia voi kommentoida selkeyttääkseen sitä tai lisätäkseen muistiinpanoja kahdella eri tavalla.
</p>

<ul>
  <li>Yhden rivin kommentit aloitetaan kahdella vinoviivalla, <code>//</code>. Kaikki kahta vinoviivaa seuraava samalla rivillä oleva teksti tulkitaan kommentiksi.</li>
  <li>Useamman rivin kommentit aloitetaan yhdellä vinoviivalla ja tähdellä <code>/*</code> ja lopetetaan tähdellä ja vinoviivalla <code>*/</code>. Kaikki useamman rivin kommentin aloittavan ja lopettavan alueen välillä tulkitaan kommentiksi.</li>
</ul>

<p>
  Alla on esimerkki ohjelmasta, jossa kumpikin kommenttityyppi on käytössä.
</p>


<% partial 'partials/code_highlight' do %>
public class Kommentteja {
    public static void main(String[] args) {

        // Tulostetaan
        System.out.println("Tulostettava teksti");
        System.out.println("Lisää tulostettavaa!");

        /*
        Seuraavaksi:
         - lisää tulostamisesta
         - lisää harjoittelua
         - muuttujat
         - ...
        */

        // System.out.println("Muuta tulostettavaa");
    }
}
<% end %>

<p>
  Esimerkin alin rivi esittelee erityisen kätevän käyttökohteen kommenteille. Kirjoitettua lähdekoodia ei tarvitse poistaa jos haluaa tilapäisesti kokeilla jotain.
</p>

<% partial 'partials/exercise', locals: { name: 'Hei Maailma! (Ja Mualima!)' } do %>

  <p>
    Tee ohjelma, jonka tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
Hei Maailma!
(Ja Mualima!)
  <% end %>

<% end %>


<% partial 'partials/material_sub_sub_heading' do %>
  Tulostaminen
<% end %>


<p>
  Käytimme edellä lausetta <code>System.out.println("tulostettava");</code> merkkijonon tulostamiseen. Tulostuslause tulostaa sekä hipsuissa olevan merkkijonon että rivinvaihdon. Jos haluaa tulostaa merkkijonon ilman rivinvaihtoa, käytetään komentoa <code>System.out.print("tulostettava");</code>.
</p>

<p>
  Yhteenvetona: tulostamiseen on kaksi lausetta:
</p>

<ul>
  <li><code>System.out.println("sana");</code> tulostaa tekstin "sana" ja loppurivinvaihdon</li>
  <li><code>System.out.print("sana");</code> tulostaa tekstin "sana" ilman loppurivinvaihtoa</li>
</ul>

<p>
  Tulostettavan tekstin osana voi olla myös erikoismerkkejä, joista tärkein on rivinvaihto. Rivinvaihto ilmaistaan kenoviivalla ja n-merkillä seuraavasti: <code>\n</code>. Erikoismerkkejä on <a href="http://en.wikipedia.org/wiki/Escape_character" title="Escape character - Wikipedia, the free encyclopedia" target="_blank" rel="noopener">muitakin</a>.
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("Ensimmäinen\nToinen\nKolmas");
<% end %>

<p>
  Ylläoleva lause tulostaa seuraavaa:
</p>

<% partial 'partials/sample_output' do %>
Ensimmäinen
Toinen
Kolmas
<% end %>



<% partial 'partials/material_sub_sub_heading' do %>
  Komennon parametrit
<% end %>

<p>
  Tulostuslauseen tulostama tieto eli komennon <em>parametrit</em> annetaan tulostuskomennolle lisäämällä ne lauseen perässä olevien sulkujen <code>()</code> sisään. Esimerkiksi <code>System.out.println</code> -komennon parametriksi voidaan antaa merkkijono <em>hei</em> hipsujen sisällä seuraavasti: <code>System.out.println("hei")</code>.
</p>

<% partial 'partials/material_sub_sub_heading' do %>
  Puolipiste
<% end %>

<p>
  Puolipisteellä <code>;</code> erotetaan lauseet toisistaan. Voisimme oikeastaan kirjoittaa koko ohjelman yhdelle riville -- mikä ei kuitenkaan ole kovin ymmärrettävää.
</p>

<% partial 'partials/code_highlight' do %>
  System.out.print("Hei "); System.out.print("maailma"); System.out.print("!\n");
<% end %>

<% partial 'partials/sample_output' do %>
  Hei maailma!
<% end %>

<p>
  Vaikka ylläoleva esimerkki toimii, on rivinvaihtojen käyttö tärkeää muita ohjelmoijia ajatellen. Tällöin ohjelman lukija tietää, että kullakin rivillä tehdään vain yksi konkreettinen asia.
</p>


<% partial 'partials/material_sub_heading' do %>
  Ohjelmointityylistä
<% end %>

<p>
  Vaikka tietokone ja käyttämämme ohjelmointikieli ei aseta rajoituksia kirjoitettavan ohjelmakoodin ulkoasulle, olemme huomanneet että ohjelmoijan -- tai opiskelevan ohjelmoijan -- kirjoittaman koodin ulkoasulla on merkitystä myös oppimisen kannalta. Luettavuus ja sisennyksen säännönmukaisuus ovat asioita, jotka vaikuttavat lähdekoodin ymmärrettävyyteen, ja sitä kautta myös oppimistuloksiin. Seuraava koodi on säännönmukaisesti sisennettyä.
</p>

<% partial 'partials/code_highlight' do %>
public class Esimerkki {
    public static void main(String[] args) {
        System.out.println("Heippa vaan! Tämä koodi on siististi sisennetty.");
        System.out.println("public class -- ei sisennystä.");
        System.out.println("public static -- neljän merkin sisennys.");
        System.out.println("public static ... sisällä -- kahdeksan merkin sisennys -- tai enemmän.");
    }
}
<% end %>


<p>
  Tämä koodi taas ei ole kovin ymmärrettävää.
</p>

<% partial 'partials/code_highlight' do %>
         public class Esimerkki {
public static void main(String[] args) {
      System.out.println("Heippa vaan! Tämä koodi on siististi sisennetty.");
 System.out.println("public class -- ei sisennystä.");
                   System.out.println("public static -- neljän merkin sisennys.");
           System.out.println("public static ... sisällä -- kahdeksan merkin sisennys -- tai enemmän.");}}
<% end %>

<p>
  Kurssilla käytettävä Test My Code -ympäristö sisältää Checkstyle-nimisen työvälineen. Checkstyle-työvälinettä voi käyttää mm. koodin sisennyksen ja muiden tyyliseikkojen automaattiseen tarkastamiseen. Tällä kurssilla Checkstyleä käytetään tyylin tarkastamiseen.
</p>

<p>
  Tyylivirheet näytetään ohjelmointiympäristössä keltaisella, ja normaalit testi-ilmoitukset punaisella. Kurssilla tutuksi tuleva tehtävän edistymispalkki muuttuu myöskin keltaiseksi, jos koodissa havaitaan tyylivirheitä. Vaikkakin näppäinyhdistelmä alt + shift + f (OS X control + shift + f) auttaa useimpien tyylivirheiden korjaamiseen, on koodia syytä kirjoittaa oikein alusta alkaen.
</p>


<% partial 'partials/hint', locals: { name: 'Lähdekoodi tulee sisentää oikein' } do %>

  <p>
    Javassa koodia sisennetään neljän välilyönnin tai yhden tabulaattorin verran jokaisen lohkon kohdalla. Käytä sisentämiseen joko välilyöntejä tai tabulaattoreita. Joissakin tapauksissa sisennys saattaa hajota mikäli käytät molempia. NetBeans auttaa tässä kun painat kirjainyhdistelmää "alt + shift + f" (OS X "control + shift + f").
  </p>

  <p>
    Jatkossa ohjelmakoodi tulee sisentää oikein myös tehtävissä. Jos sisennys on väärin, ei ohjelmointiympäristö hyväksy tehtävää.
  </p>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Kuusi' } do %>

  <p>
    Tee ohjelma, jonka tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
    *
   ***
  *****
 *******
*********
    *
  <% end %>

<% end %>


<% partial 'partials/hint', locals: { name: 'Lyhenne "sout"' } do %>

  <p>
    Kirjoitit todennäköisesti aika monta kertaa <code>System.out.println("...")</code>. Kokeile kirjoittaa NetBeans:iin (main:in sisään) tyhjälle riville <em>sout</em> ja paina tabulaatoria (näppäin q:n vasemmalla puolella). Mitä tapahtuu? Tämä pieni apuväline säästänee jatkossa runsaasti aikaasi.
  </p>

<% end %>


<% partial 'partials/material_heading' do %>
  Ohjelma ja tieto
<% end %>

<p>
  <strong>Muuttuja</strong> on keskeinen käsite ohjelmoinnissa. Muuttujia käytetään tiedon tallentamiseen myöhempää käyttöä varten. Myöhempää käyttöä on esimerkiksi tallennetun tiedon lukeminen, tulostaminen tai muuttaminen, sekä tiedon vertaileminen toiseen tietoon.
</p>

<p>
  Muuttujien nimentä on ohjelmoijan vastuulla. Muuttujat nimetään tyypillisesti siten, että ne kuvaavat käyttötarkoitustaan -- esimerkiksi arvosanan sisältävän muuttujan nimeksi kannattaa asettaa <code>arvosana</code>.
</p>


<% partial 'partials/material_sub_heading' do %>
  Tiedon tyyppi
<% end %>


<p>
  Ohjelman käsittelemä tieto on aina tietyn tyyppistä. Tyyppejä ovat esimerkiksi kokonaisluku (<code>int</code>), liukuluku (<code>double</code>) eli desimaaliluku ja totuusarvo (<em>boolean</em>). Kokonaisluvut ovat numeroita, esimerkiksi <code>42</code>, liukuluvut desimaalilukuja, esimerkiksi <code>42.42</code> (desimaaliluvun erotusmerkki on piste), ja totuusarvot sisältävät joko arvon <code>true</code>, eli totta, tai arvon <code>false</code>, eli epätotta.
</p>


<% partial 'partials/material_sub_heading' do %>
  Muuttujan esittely
<% end %>

<p>
  Muuttuja esitellään -- eli luodaan -- kertomalla ensin tiedon tyyppi, jota seuraa muuttujalle annettava nimi. Muuttujaan asetetaan arvo yhdellä yhtäsuuruusmerkillä (<code>=</code>).
</p>

<% partial 'partials/code_highlight' do %>
int kuukausia = 12;
<% end %>

<p>
  Yllä olevassa lauseessa luodaan kokonaisluku-tyyppinen muuttuja <em>(int)</em>, jolle annetaan nimeksi <em>kuukausia</em>. Muuttujaan kuukausia asetetaan arvo 12.  Lause luetaan "muuttuja <em>kuukausia</em> saa <em>arvon</em> 12".
</p>

<p>
  Muuttujan arvo voidaan yhdistää tulostuslauseelle annettavaan parametriin <code>+</code>-merkillä seuraavan esimerkin mukaisesti.
</p>

<% partial 'partials/code_highlight' do %>
public class Esimerkki {
    public static void main(String[] args) {
        int elamanTarkoitus = 123;
        double pii = 3.141592653;

        System.out.println("Elämän tarkoitus: " + elamanTarkoitus);
        System.out.println("Piin arvo on: " + pii);
    }
}
<% end %>

<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
Kokonaislukumuuttuja: 123
Liukulukumuuttuja: 3.141592653
<% end %>

<% partial 'partials/hint', locals: { name: 'Ohjelman suorituksen visualisointi' } do %>

  <p>
    Alla olevalla työvälineellä voi tarkastella ohjelman suorituksen etenemistä. Lähdekoodin vasemmalla laidalla oleva nuoli kertoo ohjelman suorituskohdan. Oikealla laidalla näkyy ohjelman muistiin tallennetut muuttujat sekä niiden arvot. Alla näkyy ohjelman tulostus.
  </p>

  <p>
    Painamalla nappia "Next" ohjelman suoritus etenee.
  </p>

<% end %>

<div class="code-states-visualizer-widget" data-input='{"code":"public class Esimerkki {\n    public static void main(String[] args) {\n        int elamanTarkoitus = 123;\n        double pii = 3.141592653;\n\n        System.out.println(\"Elämän tarkoitus: \" + elamanTarkoitus);\n        System.out.println(\"Piin arvo on: \" + pii);\n    }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":4,"stack_to_render":[{"func_name":"main:4","encoded_locals":{"elamanTarkoitus":123},"ordered_varnames":["elamanTarkoitus"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"4","frame_id":4}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":6,"stack_to_render":[{"func_name":"main:6","encoded_locals":{"elamanTarkoitus":123,"pii":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["elamanTarkoitus","pii"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"7","frame_id":7}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Elämän tarkoitus: 123\n","event":"step_line","line":7,"stack_to_render":[{"func_name":"main:7","encoded_locals":{"elamanTarkoitus":123,"pii":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["elamanTarkoitus","pii"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"10","frame_id":10}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Elämän tarkoitus: 123\nPiin arvo on: 3.141592653\n","event":"step_line","line":8,"stack_to_render":[{"func_name":"main:8","encoded_locals":{"elamanTarkoitus":123,"pii":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["elamanTarkoitus","pii"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"14","frame_id":14}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Elämän tarkoitus: 123\nPiin arvo on: 3.141592653\n","event":"return","line":8,"stack_to_render":[{"func_name":"main:8","encoded_locals":{"elamanTarkoitus":123,"pii":["NUMBER-LITERAL","3.141592653"],"__return__":["VOID"]},"ordered_varnames":["elamanTarkoitus","pii","__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"15","frame_id":15}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>



<% partial 'partials/exercise', locals: { name: 'Muuttuvat muuttujat' } do %>

  <p>
    Tehtäväpohja sisältää ohjelman, joka tulostaa seuraavaa.
  </p>

  <% partial 'partials/sample_output' do %>
    Kanoja:
    3
    Pekonia (kg):
    5.5

    Tässä vielä tiivistelmä:
    3
    5.5
  <% end %>

  <p>
    Muuta ohjelmaa annetuista kohdista niin että tuloste on:
  </p>

  <% partial 'partials/sample_output' do %>
    Kanoja:
    9000
    Pekonia (kg):
    0.1

    Tässä vielä tiivistelmä:
    9000
    0.1
  <% end %>

<% end %>


<p>
  Muuttujien nimet ovat uniikkeja, eikä kahdella muuttujalla saa olla ohjelmassa samaa nimeä. Seuraavassa esimerkissä oleva ohjelma on virheellinen, koska muuttuja pii esitellään kahdesti.
</p>

<% partial 'partials/code_highlight' do %>
public class Esimerkki {
    public static void main(String[] args) {
        double pii = 3.14;
        double pii = 3.141592653;

        System.out.println("Piin arvo on: " + pii);
    }
}
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Muuttujaan asetetun arvon muuttaminen
<% end %>

<p>
  Muuttuja on olemassa sen esittelyhetkestä lähtien, ja sen arvo säilyy kunnes muuttujaan asetetaan toinen arvo. Muuttujan arvon muuttaminen onnistuu lauseella, jossa on muuttujan nimi, yhtäsuuruusmerkki, ja muuttujan uusi arvo. Huomaa että muuttujan tyyppi kirjoitetaan vain kun muuttuja esitellään ohjelmassa ensimmäistä kertaa.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 123;
System.out.println("Muuttujan arvo on " + luku);

luku = 42;
System.out.println("Muuttujan arvo on " + luku);
<% end %>

<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
Muuttujan arvo on 123
Muuttujan arvo on 42
<% end %>


<p>
  Tarkastellaan edellisen ohjelmakoodin suoritusta askel askeleelta. Kun muuttuja esitellään ohjelmakoodissa ensimmäistä kertaa, eli sekä muuttujan tyyppi (tässä <code>int</code>) että sen nimi (tässä <code>luku</code>) kerrotaan tietokoneelle, tietokone luo muuttujaa varten "nimetyn lokeron". Tämän jälkeen yhtäsuuruusmerkin oikealla puolella oleva arvo kopioidaan tähän nimettyyn lokeroon.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-1.png"/>

<p>
  Kun ohjelmakoodissa viitataan muuttujaan sen nimellä -- tässä halutaan tulostaa merkkijono "Muuttujan arvo on " sekä muuttujan <code>luku</code> arvo, muuttujan <code>luku</code> arvo haetaan sen nimellä löytyvästä lokerosta.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-2.png"/>

<p>
  Kun muuttujaan asetetaan arvo (tässä <code>luku = 42</code>), tarkistetaan ensin löytyykö muuttujan nimistä lokeroa. Jos lokero löytyy, uusi arvo kopioidaan lokeroon vanhan arvon tilalle ja vanha arvo katoaa. Jos muuttujan nimellä ei löydy lokeroa, ohjelman suoritus päättyy virheilmoitukseen tai ohjelmaa ei voida käynnistää.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-3.png"/>

<p>
  Seuraavaksi ohjelmakoodissa viitataan taas muuttujaan sen nimellä -- tässäkin halutaan tulostaa merkkijono "Muuttujan arvo on " sekä muuttujan <code>luku</code> arvo. Toimitaan kuten normaalisti, eli haetaan muuttujan <code>luku</code> arvo sen nimellä löytyvästä lokerosta.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-4.png"/>


<p>
  Kuten huomaat, ohjelman lopputilanteessa muuttujan alkuperäinen arvo on kadonnut. Muuttuja voi sisältää kerrallaan aina vain yhden arvon.
</p>



<% partial 'partials/material_sub_heading' do %>
  Muuttujan tyyppi pysyy
<% end %>


<p>
  Kun muuttujan tyyppi on kertaalleen määritelty, ei sitä voi enää muuttaa.  Totuusarvoa ei siis voi esimerkiksi asettaa kokonaislukutyyppiseen muuttujaan, eikä totuusarvomuuttujaan voi asettaa kokonaislukua.
</p>

<% partial 'partials/code_highlight' do %>
boolean onnistuukoKokonaisLuvunAsetus = false;
onnistuukoKokonaisLuvunAsetus = 42; // Ei onnistu

int luku = 10;
onnistuukoKokonaisLuvunAsetus = luku; // Ei myöskään onnistu
<% end %>

<p>
  Poikkeus kuitenkin löytyy: liukulukutyyppiseen muuttujaan voi asettaa kokonaisluvun, sillä Java osaa muuttaa kokonaisluvun liukuluvuksi asetuksen yhteydessä.
</p>

<% partial 'partials/code_highlight' do %>
double liukuluku = 0.42;
liukuluku = 1; // Onnistuu

int luku = 10;
liukuluku = luku; // Onnistuu myös
<% end %>

<p>
  Liukulukua ei kuitenkaan voi asettaa kokonaislukuun. Tämä johtuu siitä, että ohjelmointikielen suunnittelijat yrittävät suojella ohjelmoijaa tietoa kadottavilta ohjelmointivirheiltä.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 4.2; // Ei onnistu

double liukuluku = 0.42;
luku = liukuluku; // Ei myöskään onnistu
<% end %>



<% partial 'partials/material_sub_heading' do %>
  Muuttujan nimentä
<% end %>

<p>
  Muuttujien nimentä on oleellinen osa ohjelman kuvausta. Tarkastellaan kahta esimerkkiä.
</p>

<% partial 'partials/code_highlight' do %>
double a = 3.14;
double b = 22.0;
double c = a * b * b;

System.out.println();
<% end %>

<% partial 'partials/sample_output' do %>
1519.76
<% end %>


<% partial 'partials/code_highlight' do %>
double pii = 3.14;
double sade = 22.0;
double pintaAla = pii * sade * sade;

System.out.println(pintaAla);
<% end %>

<% partial 'partials/sample_output' do %>
  1519.76
<% end %>

<p>
  Edellä olevat kaksi esimerkkiä sisältävät täsmälleen saman toiminnallisuuden ja tuottavat saman tulostuksen. Toinen esimerkeistä on kuitenkin paljon ymmärrettävämpi. Kyseessä on ympyrän pinta-alan laskevan ohjelman koodi. Ensimmäisellä rivillä määritellään piin arvo, toisella rivillä ympyrän säde, ja kolmannella rivillä lasketaan pinta-ala. Tämän jälkeen pinta-ala tulostetaan.
</p>



<% partial 'partials/hint', locals: { name: 'Muuttujat sanoittavat ohjelmaa ja ratkaistavaa ongelmaa' } do %>

  <p>
    Ohjelmointi on ongelmanratkaisuväline. Ohjelmoidessa luodaan ratkaisua jonkinlaiseen ongelmaan kuten autojen automaattiseen ohjaamiseen. Kun ongelmaa ratkaistaan, ohjelmoija päättää termeistä, joilla ongelmaa kuvataan. Tämä termistö, esimerkiksi ohjelmassa käytettävien muuttujien nimet, tulevat kuvaamaan ongelmaa ohjelman parissa tulevaisuudessa työskenteleville.
  </p>

  <p>
    Kun sanoitat ratkaistavaa ongelmaa, mieti ongelmaan liittyviä käsitteitä ja niitä kuvaavia sanoja. Jos et keksi sopivia termejä, pohdi ensin mitkä sanat eivät ainakaan kuvaa ongelmaa. Valitse tämän jälkeen jonkinlainen termistö -- voit tyypillisesti onneksi parantaa käyttämääsi termistöä myös jälkikäteen.
  </p>

<% end %>

<p>
  Muuttujan nimeämistä rajoittavat tietyt ehdot.
</p>

<p>
  Muuttujan nimessä ei saa olla tiettyjä erikoismerkkejä, kuten huutomerkkejä (!). Välilyönti ei ole sallittu, sillä se erottaa komentojen osat toisistaan. Välilyönti kannattaa korvata <a href="http://fi.wikipedia.org/wiki/CamelCase" title="CamelCase – Wikipedia">camelCase</a><-tyylillä, jolloin nimi <code>muistuttaneeKamelia</code>. <strong>Huom!</strong> Muuttujien nimien ensimmäinen kirjain kirjoitetaan aina pienellä:
</p>

<% partial 'partials/code_highlight' do %>
int camelCaseMuuttuja = 7;
<% end %>

<p>
Numeroita voidaan käyttää muuttujan nimessä, kunhan nimi ei ala numerolla.  Nimi ei myöskään voi koostua pelkistä numeroista.
</p>

<% partial 'partials/code_highlight' do %>
int 7muuttuja = 4; // Ei sallittu!
int muuttuja7 = 4; // Sallittu, mutta ei kuvaava muuttujan nimi
<% end %>

<p>
  Muuttujan nimi ei saa olla jo entuudestaan käytössä. Tälläisiä nimiä ovat mm. aikaisemmin määritellyt muuttujat ja Javan valmiit komennot, kuten <code>System.out.print</code> ja <code>System.out.println</code>.
</p>

<% partial 'partials/code_highlight' do %>
int camelCase = 2;
int camelCase = 5; // Ei sallittu -- muuttuja camelCase on jo käytössä!
<% end %>

<p>
  Muuttujien nimissä ei tule myöskään käyttää ääkkösiä. Voit korvata ääkköset aakkosilla, eli muuta ä -> a ja ö -> o.
</p>


<% partial 'partials/material_sub_sub_heading' do %>
  Sallittuja muuttujien nimiä
<% end %>

<ul>
  <li>kuukaudenViimeinenPaiva = 20</li>
  <li>ensimmainenVuosi = 1952</li>
  <li>nimi = "Essi"</li>
</ul>


<% partial 'partials/material_sub_sub_heading' do %>
  Virheellisiä muuttujien nimiä
<% end %>

<ul>
  <li>kuukauden viimeinen päivä = 20</li>
  <li>1paiva = 1952</li>
  <li>varo! = 1910</li>
  <li>1920 = 1</li>
</ul>



<% partial 'partials/material_heading' do %>
  Tietokone on laskin
<% end %>

<p>
  Tietokone on käytännössä erittäin tehokas laskin. Tietokoneen <a href="https://fi.wikipedia.org/wiki/Suoritin" target="_blank" rel="noopener">suoritin</a> hakee suoritettavaan ohjelmaan liittyvät konekieliset käskyt muistista ja suorittaa niitä yksi kerrallaan. Tietokoneen käyttöjärjestelmän -- joka sekin on ohjelma -- vastuulla on suoritettavan ohjelman valinta.
</p>

<p>
  Tutustutaan seuraavaksi tyypillisimpiin laskuoperaatioihin.
</p>


<% partial 'partials/material_sub_heading' do %>
  Laskentaa
<% end %>

<p>
  Laskuoperaatiot ovat tuttuja ja suoraviivaisia: yhteenlasku <code>+</code>, erotus <code>-</code>, kertolasku <code>*</code> ja jakolasku <code>/</code>. Laskentajärjestys on myös tuttu: laskenta tehdään vasemmalta oikealle sulut huomioon ottaen. Kuitenkin <code>*</code> ja <code>/</code> lasketaan ennen <code>+</code> ja <code>-</code> operaatioita, samoin kuin perus- tai kansakoulumatematiikassa on tullut tutuksi.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 2;
System.out.println(eka); // tulostaa 2
int toka = 4;
System.out.println(toka); // tulostaa 4

int summa = eka + toka; // muuttujaan summa asetetaan muuttujien eka ja toka arvojen summa
System.out.println(summa); // tulostaa 6
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Laskujärjestys ja sulut
<% end %>

<p>
  Laskujärjestykseen voi vaikuttaa sulkujen avulla. Sulkujen sisällä olevat laskuoperaatiot suoritetaan ennen niiden ulkopuolella olevia laskuoperaatioita.
</p>

<% partial 'partials/code_highlight' do %>
int laskuSuluilla = (1 + 1) + 3 * (2 + 5);
System.out.println(laskuSuluilla); // tulostaa 23

int laskuSuluitta = 1 + 1 + 3 * 2 + 5;
System.out.println(laskuSuluitta); // tulostaa 13
<% end %>


<p>
  Yllä olevan esimerkin voi jakaa myös osiin.
</p>

<% partial 'partials/code_highlight' do %>
int laskuSuluilla = (1 + 1);
System.out.println(laskuSuluilla); // tulostaa 2
laskuSuluilla = laskuSuluilla + 3 * (2 + 5);
System.out.println(laskuSuluilla); // tulostaa 23

int laskuSuluitta = 1 + 1;
laskuSuluitta = laskuSuluitta + 3 * 2;
laskuSuluitta = laskuSuluitta + 5;
System.out.println(laskuSuluitta); // tulostaa 13
<% end %>


<% partial 'partials/exercise', locals: { name: 'Sekunnit vuodessa' } do %>

  <p>
    Täydennä tehtäväpohjassa olevaa ohjelmaa siten, että se laskee kuinka monta sekuntia on vuodessa. Voit olettaa, että vuodessa on 365 päivää.
  </p>

  <p>
    Ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
Vuodessa on X sekuntia.
  <% end %>

  <p>
    X:n kohdalle tulee ohjelmasi laskema tulos. Huom! Hyödynnä tässä tehtävässä muuttujia.
  </p>

<% end %>



<%= partial 'partials/quiz', locals: { id: '59a93d858858e700042f83a7' } %>

<% partial 'partials/hint', locals: { name: 'Lauseke ja lause' } do %>

  <p>
    Lauseke (expression) on arvojen yhdistelmä, joka muuntuu arvoksi laskuoperaation tai evaluaation yhteydessä. Alla oleva lause sisältää lausekkeen <code>1 + 1 + 3 * 2 + 5</code>, joka evaluoidaan ennen arvon asetusta muuttujaan.
  </p>

  <% partial 'partials/code_highlight' do %>
int laskuSuluitta = 1 + 1 + 3 * 2 + 5;
  <% end %>

  <p>
    Lausekkeen evaluaatio tapahtuu aina ennen muuttujan arvon asetusta, eli yllä lasku "1 + 1 + 3 * 2 + 5" suoritetaan ennen tuloksen asetusta muuttujaan.
  </p>

<% end %>


<p>
  Lausekkeen evaluointi tapahtuu ohjelmakoodissa siinä kohtaa, missä lauseke on. Evaluointi onnistuu siis esimerkiksi myös tulostuslauseen yhteydessä, jos lauseketta käytetään tulostuslauseen parametrin arvon laskemisessa.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 2;
int toka = 4;

System.out.println(eka + toka); // tulostaa 6
System.out.println(2 + toka - eka - toka); // tulostaa 0
<% end %>


<p>
  Lauseke ei muuta muuttujassa olevaa arvoa, ellei lausekkeen lopputulosta aseteta muuttujan arvoksi tai anneta parametrina esimerkiksi tulostukselle.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 2;
int toka = 4;

// alla oleva lauseke ei edes toimi, sillä lauseketta
// ei aseteta minkään muuttujan arvoksi tai anneta parametrina
// tulostuslauseelle
eka + toka;
<% end %>


<%= partial 'partials/quiz', locals: { id: '5878a0b579db890004df0d1d' } %>


<% partial 'partials/material_sub_heading' do %>
  Laskentaa ja tulostamista
<% end %>

<p>
  Muuttujan arvon voi tulostaa komennolla <code>System.out.println</code>. Tulostettavaan hipsuilla merkittyyn merkkijonoon, esim. "Pituus ", voidaan lisätä muuta tulostettavaa operaation <code>+</code> avulla.
</p>

<% partial 'partials/code_highlight' do %>
int pituus = 42;
System.out.println("Pituus " + pituus);
<% end %>

<% partial 'partials/sample_output' do %>
Pituus 42
<% end %>

<% partial 'partials/code_highlight' do %>
System.out.println("tuossa on kokonaisluku --&gt; " + 2);
System.out.println(2 + " &lt;-- tuossa on kokonaisluku");
<% end %>

<% partial 'partials/sample_output' do %>
tuossa on kokonaisluku --&gt; 2
2 &lt;-- tuossa on kokonaisluku
<% end %>

<p>
  Jos toinen operaation <code>+</code> kohteista on merkkijono, muutetaan myös toinen operaation kohteista merkkijonoksi ohjelman suorituksen yhteydessä. Alla olevassa esimerkissä kokonaisluku <code>2</code> on muutettu merkkijonoksi "2", ja siihen on yhdistetty merkkijono.
</p>

<p>
  Aiemmin esitellyt laskusäännöt pätevät täälläkin:
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("Neljä: " + (2 + 2));
System.out.println("Mutta! kaksikymmentäkaksi: " + 2 + 2);
<% end %>

<% partial 'partials/sample_output' do %>
Neljä: 4
Mutta! kaksikymmentäkaksi: 22
<% end %>

<div class="code-states-visualizer-widget" data-input='{"code":"public class Esimerkki {\n    public static void main(String[] args) {\n        System.out.println(\"Neljä: \" + (2 + 2));\n        System.out.println(\"Mutta! kaksikymmentäkaksi: \" + 2 + 2);\n    }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Neljä: 4\n","event":"step_line","line":4,"stack_to_render":[{"func_name":"main:4","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"5","frame_id":5}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Neljä: 4\nMutta! kaksikymmentäkaksi: 22\n","event":"step_line","line":5,"stack_to_render":[{"func_name":"main:5","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"8","frame_id":8}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Neljä: 4\nMutta! kaksikymmentäkaksi: 22\n","event":"return","line":5,"stack_to_render":[{"func_name":"main:5","encoded_locals":{"__return__":["VOID"]},"ordered_varnames":["__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"9","frame_id":9}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>


<p>
  Edellistä tietoa soveltamalla voimme luoda lausekkeen, joka sisältää tekstiä ja muuttujan, ja joka evaluoidaan tulostuksen yhteydessä:
</p>

<% partial 'partials/code_highlight' do %>
int x = 10;

System.out.println("muuttujan x arvo on: " + x);

int y = 5;
int z = 6;

System.out.println("y on " + y + " ja z on " + z);
<% end %>

<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
muuttujan x arvo on: 10
y on 5 ja z on 6
<% end %>

<% partial 'partials/pattern', locals: { name: 'Ratkaisumalli :: Laskeminen' } do %>

  <p>
    Samankaltaiset ongelmat toistuvat ohjelmoinnissa. Tämän takia ohjelmoijan on hyvä opetella ratkaisumalleja, joita voi soveltaa ohjelmia luodessa. Ensimmäinen ratkaisumalli ohjelmaan, jonka tehtävänä on tehdä laskentaa muuttujilla on seuraavanlainen.
  </p>

  <ol>
    <li>
      Määrittele ohjelman syötteet ja luo niitä varten muuttujat. Ohjelman syötteitä ovat laskemisessa käytettävät arvot. Syötteet tunnistaa tyypillisesti ongelma-alueen kuvauksesta.
    </li>
    <li>
      Selvitä tehtävä laskuoperaatio ja luo laskuoperaation tulokselle muuttuja. Tee ohjelman syötteiden perusteella lasku, jonka arvo asetetaan laskuoperaation tulokselle varattuun muuttujaan. Myös tehtävän laskuoperaation tunnistaa ongelma-alueen kuvauksesta.
    </li>
    <li>
      Tulosta laskuoperaation tulos.
    </li>
  </ol>

  <p>
    Esimerkiksi tehtävän <em>Tee ohjelma, jonka avulla voidaan laskea kahden kokonaisluvun summa. Ohjelman alussa määritellään kaksi muuttujaa, jotka sisältävät summattavat luvut. Voit tarvittaessa käyttää myös muita muuttujia.</em> ratkaisumalli on seuraava.
  </p>

  
  <% partial 'partials/code_highlight' do %>
    // 1. määritellään syötteet ja luodaan niitä varten muuttujat
    int eka = 1;
    int toka = 2;
    
    // 2. selvitetään laskuoperaatio ja luodaan laskuoperaation tulokselle muuttuja
    int summa = eka + toka;

    // 3. tulostetaan laskuoperaation tulos
    System.out.println("Lukujen " + eka + " ja " + toka + " summa on " + summa);  <% end %>
    
<% end %>


<% partial 'partials/exercise', locals: { name: 'Yhteenlasku' } do %>

  <p>
    Tee ohjelma, jonka avulla voidaan laskea kahden kokonaisluvun summa. Ohjelman alussa määritellään kaksi muuttujaa, jotka sisältävät summattavat luvut. Voit tarvittaessa käyttää myös muita muuttujia.
  </p>

  <p>
    Esimerkiksi jos muuttujissa on luvut 5 ja 4, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
5 + 4 = 9
  <% end %>

  <p>
    Jos taas muuttujissa on luvut 73457 ja 12888, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
73457 + 12888 = 86345
  <% end %>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Kertolasku' } do %>

  <p>
    Tee edellistä ohjelmaa vastaava ohjelma, joka laskee kahden kokonaislukumuuttujaan sijoitetun arvon kertolaskun.
  </p>

  <p>
    Esimerkiksi jos muuttujissa on luvut 2 ja 8, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
2 * 8 = 16
  <% end %>

  <p>
    Jos taas muuttujissa on luvut 277 ja 111, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
277 * 111 = 30747
  <% end %>

  <p>
    Kokeile myös kuinka suuren kertolaskun ohjelmasi pystyy laskemaan!
  </p>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Jakolasku
<% end %>


<p>
  Kokonaislukujen jakolasku on hieman hankalampi operaatio. Jakolausekkeessa käytettyjen muuttujien tyyppi määrää evaluaation tuloksena saatavan arvon tyypin. Jos kaikki jakolausekkeessa olevat muuttujat ovat kokonaislukuja, on tulos myös kokonaisluku.
</p>

<% partial 'partials/code_highlight' do %>
int tulos = 3 / 2;
System.out.println(tulos); // Huom! tulostaa 1 (kokonaisluku), sillä 3 ja 2 ovat myös kokonaislukuja
<% end %>

<% partial 'partials/code_highlight' do %>
int eka = 3:
int toka = 2;
double tulos = eka / toka;
System.out.println(tulos); // nytkin tulostus on 1, sillä eka ja toka ovat kokonaislukuja
<% end %>

<p>
  Jos jakolaskun jakaja tai jaettava (tai molemmat!) ovat liukulukuja, tulee tulokseksi myös liukuluku.
</p>

<% partial 'partials/code_highlight' do %>
double kunJaettavaOnLiukuluku = 3.0 / 2;
System.out.println(kunJaettavaOnLiukuluku); // tulostaa 1.5

double kunJakajaOnLiukuluku = 3 / 2.0;
System.out.println(kunJakajaOnLiukuluku); // tulostaa 1.5
<% end %>

<p>
  Kokonaisluku voidaan tarvittaessa muuttaa liukuluvuksi lisäämällä sen eteen tyyppimuunnosoperaatio <code>(double)</code>:
</p>

<% partial 'partials/code_highlight' do %>
int eka = 3;
int toka = 2;

double tulos1 = (double) eka / toka;
System.out.println(tulos1); // tulostaa 1.5

double tulos2 = eka / (double) toka;
System.out.println(tulos2); // tulostaa 1.5

double tulos3 = (double) (eka / toka);
System.out.println(tulos3); // tulostaa 1
<% end %>

<p>
  Jälkimmäisessä esimerkissä tulos pyöristyy väärin sillä laskuoperaatio kokonaisluvuilla suoritetaan ennen tyyppimuunnosta.
</p>

<p>
  Jos jakolausekkeen tulos asetetaan kokonaislukutyyppiseen muuttujaan, on tulos automaattisesti kokonaisluku.
</p>

<% partial 'partials/code_highlight' do %>
// tulos automaattisesti kokonaisluku: 1
int tulosKokonaislukuKoskaTyyppiKokonaisluku = 3.0 / 2;
<% end %>

<p>
  Seuraava esimerkki tulostaa "1.5", sillä jaettavasta tehdään liukuluku kertomalla se liukuluvulla (1.0 * 3 = 3.0) ennen jakolaskua.
</p>

<% partial 'partials/code_highlight' do %>
int jaettava = 3;
int jakaja = 2;

double tulos = 1.0 * jaettava / jakaja;
System.out.println(tulos);
<% end %>


<% partial 'partials/exercise', locals: { name: 'Kolmen luvun keskiarvo' } do %>

  <p>
    Tehtäväpohjassa on ohjelma, jossa on kolme muuttujaa. Ohjelman tulostus on tällä hetkellä seuraava.
  </p>

  <% partial 'partials/sample_output' do %>
eka: 9
toka: 7
kolmas: 6
  <% end %>

  <p>
    Muokkaa ohjelmaa siten, että ohjelma tulostaa myös muuttujien keskiarvon.
  </p>

  <% partial 'partials/sample_output' do %>
eka: 9
toka: 7
kolmas: 6
keskiarvo: 7.333333333333333
  <% end %>

  <p>
    Huom! Jos muuttujien arvoja muutetaan, tulee myös tulostuksen muuttua.
  </p>

  <% partial 'partials/sample_output' do %>
eka: 5
toka: 7
kolmas: 4
keskiarvo: 5.333333333333333
  <% end %>


<% end %>



<%= partial 'partials/quiz', locals: { id: '5878a2b179db890004df0d1e' } %>



<% partial 'partials/exercise', locals: { name: 'Nelilaskin' } do %>

  <p>Tehtäväpohjassa on ohjelma, jossa on kaksi muuttujaa. Ohjelman tulostus on tällä hetkellä seuraava.</p>

  <% partial 'partials/sample_output' do %>
5 + 3 = 8
  <% end %>

  <p>Muokkaa ohjelmaa siten, että ohjelma laskee myös lukujen erotuksen, tulon, ja jakolaskun.</p>

  <% partial 'partials/sample_output' do %>
5 + 3 = 8
5 - 3 = 2
5 * 3 = 15
5 / 3 = 1.6666666666666667
  <% end %>

  <p>Huom! Jos muuttujien arvoja muutetaan, tulee myös tulostuksen muuttua.</p>

  <% partial 'partials/sample_output' do %>
1 + 3 = 4
1 - 3 = -2
1 * 3 = 3
1 / 3 = 0.3333333333333333
  <% end %>

  <p>Tehtävässä ei ole testejä jotka kertovat onko tulostus oikein vai ei. Tarmista että ohjelmasi toimii oikein ennen tehtävän palautusta suorittamalla se useammalla muuttujien arvoilla.</p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Muuttujan arvoon liittyviä väärinkäsityksiä
<% end %>

<p>
  Kun tietokone suorittaa ohjelmakoodia, suorittaa se sitä käsky kerrallaan, edeten aina täsmälleen siten, kuin ohjelmakoodissa sanotaan. Kun muuttujaan asetetaan arvo, tapahtuu aina sama asia, eli yhtäsuuruusmerkin oikealla puolella oleva arvo kopioidaan yhtäsuuruusmerkin vasemmalla puolella olevan muuttujan arvoksi, eli muuttujan nimeämään paikkaan.
</p>

<p>
  On tärkeää, että ohjelmoija ymmärtää, että arvon asettaminen muuttujaan tekee aina saman asian.
</p>

<p>
  Kolme yleistä väärinkäsitystä, jotka liittyvät muuttujan arvon asettamiseen ovat seuraavat:
</p>

<ul>
  <li>Muuttujan asettamisen näkeminen siirtona kopioimisen sijaan: ohjelmakoodin <code>eka = toka</code> suorituksen jälkeen ajatellaan, että muuttujan <code>toka</code> arvo on siirtynyt muuttujan <code>eka</code> arvoksi, jonka jälkeen muuttujalla <code>toka</code> ei ole enää arvoa, tai sen arvo on esimerkiksi nolla. Tämä ei pidä paikkansa, sillä ohjelmakoodin <code>eka = toka</code> suorituksessa muuttujan <code>toka</code> nimeämässä paikassa oleva arvo kopioidaan muuttujan <code>eka</code> nimeämään paikkaan. Muuttujan <code>toka</code> arvo ei siis muutu.<br/></li>
  <li>Muuttujan asettamisen näkeminen riippuvuutena kopioimisen sijaan: ohjelmakoodin <code>eka = toka</code> suorituksen jälkeen ajatellaan, että mikä tahansa muutos muuttujaan <code>toka</code> vaikuttaa automaattisesti myös muuttujaan <code>eka</code>. Tämä ei pidä paikkansa, sillä asetus -- kopiointi -- on yksittäinen tapahtuma. Se tapahtuu vain silloin, ohjelmakoodi <code>eka = toka</code> suoritetaan.<br/></li>
  <li>Kolmas väärinkäsitys liittyy kopioimisen suuntaan: ohjelmakoodin <code>eka = toka</code> suorituksessa ajatellaan, että muuttujan <code>toka</code> arvoksi kopioidaan muuttujan <code>eka</code> arvo. Tämä näkyy myös tilanteina, missä ohjelmoija voi vahingossa kirjoittaa esimerkiksi <code>42 = arvo</code> -- onneksi ohjelmointiympäristöt tukevat myös tässä.</li>
</ul>

<p>
  Ehkäpä paras tapa tietokoneen ohjelmakoodin suorittamisen ymmärtämiseen on paperin ja kynän käyttäminen. Kun luet ohjelmakoodia, kirjoita paperille uusien muuttujien nimet, sekä kirjoita ylös rivi riviltä, miten ohjelmakoodissa olevien muuttujien arvot muuttuvat. Havainnollistetaan suoritusta seuraavalla ohjelmakoodilla:
</p>

<% partial 'partials/code_highlight' do %>
rivi 1: int eka = (1 + 1);
rivi 2: int toka = eka + 3 * (2 + 5);
rivi 3:
rivi 4: eka = 5;
rivi 5:
rivi 6: int kolmas = eka + toka;
rivi 7: System.out.println(eka);
rivi 8: System.out.println(toka);
rivi 9: System.out.println(kolmas);
<% end %>

<p>
  Alla on kirjoitettu ylläolevan ohjelmakoodin suoritus auki.
</p>

<% partial 'partials/sample_output' do %>
rivi 1: luodaan muuttuja eka
rivi 1: kopioidaan muuttujan eka arvoksi laskun 1 + 1 tulos
rivi 1: muuttujan eka arvo on 2

rivi 2: luodaan muuttuja toka
rivi 2: lasketaan 2 + 5, 2 + 5 ->  7
rivi 2: lasketaan 3 * 7, 3 * 7 -> 21
rivi 2: lasketaan eka + 21
rivi 2: kopioidaan muuttujan eka arvo laskuun, muuttujan eka arvo on 2
rivi 2: lasketaan 2 + 21, 2 + 21 -> 23
rivi 2: kopioidaan muuttujan toka arvoksi 23
rivi 2: muuttujan toka arvo on 23

rivi 3: (tyhjä, ei tehdä mitään)

rivi 4: kopioidaan muuttujan eka arvoksi 5
rivi 4: muuttujan eka arvo on 5

rivi 5: (tyhjä, ei tehdä mitään)

rivi 6: luodaan muuttuja kolmas
rivi 6: lasketaan eka + toka
rivi 6: kopioidaan muuttujan eka arvo laskuun, muuttujan eka arvo on 5
rivi 6: lasketaan 5 + toka
rivi 6: kopioidaan muuttujan toka arvo laskuun, muuttujan toka arvo on 23
rivi 6: lasketaan 5 + 23 -> 28
rivi 6: kopioidaan muuttujan kolmas arvoksi 28
rivi 6: muuttujan kolmas arvo on 28

rivo 7: tulostetaan muuttuja eka
rivi 7: kopioidaan muuttujan eka arvo tulostettavaksi, muuttujan eka arvo on 5
rivi 7: tulostetaan arvo 5

rivi 8: tulostetaan muuttuja toka
rivi 8: kopioidaan muuttujan toka arvo tulostettavaksi, muuttujan toka arvo on 23
rivi 8: tulostetaan arvo 23

rivi 9: tulostetaan muuttuja kolmas
rivi 9: kopioidaan muuttujan kolmas arvo tulostettavaksi, muuttujan kolmas arvo on 28
rivi 9: tulostetaan arvo 28
<% end %>


<p>
  Alla edellinen ohjelma askeleittain visualisoituna. Käytössä oleva askeleittainen visualisointi käsittelee ohjelmakoodia riveittäin -- pohdi askeleiden kohdalla miten ohjelma päätyy sen tulostamaan lopputulokseen.
</p>

<div class="code-states-visualizer-widget" data-input='{"code":"public class LaskentaAskeleittain {\n  public static void main(String[] args) {\n    int eka = (1 + 1);\n    int toka = eka + 3 * (2 + 5);\n\n    eka = 5;\n\n    int kolmas = eka + toka;\n    System.out.println(eka);\n    System.out.println(toka);\n    System.out.println(kolmas);\n  }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":4,"stack_to_render":[{"func_name":"main:4","encoded_locals":{"eka":2},"ordered_varnames":["eka"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"4","frame_id":4}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":6,"stack_to_render":[{"func_name":"main:6","encoded_locals":{"eka":2,"toka":23},"ordered_varnames":["eka","toka"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"9","frame_id":9}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":8,"stack_to_render":[{"func_name":"main:8","encoded_locals":{"eka":5,"toka":23},"ordered_varnames":["eka","toka"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"12","frame_id":12}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":9,"stack_to_render":[{"func_name":"main:9","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"17","frame_id":17}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n","event":"step_line","line":10,"stack_to_render":[{"func_name":"main:10","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"21","frame_id":21}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n23\n","event":"step_line","line":11,"stack_to_render":[{"func_name":"main:11","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"24","frame_id":24}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n23\n28\n","event":"step_line","line":12,"stack_to_render":[{"func_name":"main:12","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"27","frame_id":27}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n23\n28\n","event":"return","line":12,"stack_to_render":[{"func_name":"main:12","encoded_locals":{"eka":5,"toka":23,"kolmas":28,"__return__":["VOID"]},"ordered_varnames":["eka","toka","kolmas","__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"28","frame_id":28}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>

<%= partial 'partials/quiz', locals: { id: '5878a3ee79db890004df0d1f' } %>



<% partial 'partials/exercise', locals: { name: 'Jakolaskin' } do %>

  <p>
    Tässä tehtävässä harjoittelet ensimmäistä kertaa tuntemattoman ohjelman muokkaamista. Vaikka suurin osa ohjelmasta tuntuu kryptiseltä, etkä tunne lähdekoodissa käytettyjä sanoja lainkaan, huomaat sieltä todennäköisesti myös tuttuja asioita.
  </p>

  <p>
    Tehtäväpohjaan on toteutettuna graafinen (eli ohjelma avautuu ikkunassa) jakolaskin. Ohjelmassa on kuitenkin pientä häikkää, kuten alla olevasta esimerkistä huomaat.
  </p>

  <img class="naytto" src="/img/exercises/01-10-jakolaskin.png"/>

  <p>
  </p>

  <p>
    Etsi vika ja korjaa se. Huomaa, että tässä tehtävässä (ja muissa käyttöliittymiin liittyvissä tehtävissä) automaattiset testit käyttävät hiirtäsi. Älä siis käytä hiirtäsi testien ajon aikana.
  </p>

  <p>
    Huom! Isolla resoluutiolla varustelluissa koneissa on huomattu ongelmia hiirtä liikuttavan testikirjaston kanssa. Jos huomaat, että ohjelmasi toimii kun käynnistät sen itse ja kokeilet sen toimintaa, mutta testien ajaminen epäonnistuu, lähetä tehtävä palvelimelle arvioitavaksi.
  </p>

<% end %>



<% partial 'partials/material_heading' do %>
  Käyttäjän syötteen lukeminen
<% end %>

<p>
  Edellisissä ohjelmissamme tietokonetta on käytetty lähes poikkeuksetta hyvin yksinkertaisena laskimena. Laskuoperaatioiden käsittelemät luvut on syötetty lähdekoodiin, eikä käyttäjä ole päässyt syöttämään niitä itse.
</p>


<p>
  Tutustutaan seuraavaksi syötteen lukemiseen käyttäjältä. Syötteen lukemiseen käytetään Javan valmista Scanner-apuvälinettä. Apuväline tuodaan käyttöön lisäämällä komento <code>import java.util.Scanner;</code> ennen pääohjelmarungon aloitusta (<code>public class ...</code>).
</p>


<% partial 'partials/code_highlight' do %>
import java.util.Scanner; // tuodaan lukemiseen käytetty apuväline Scanner käyttöömme

public class Esimerkki {

    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        // ohjelmakoodi
    }
}
<% end %>

<p>
  Älä hätäile vaikka pääohjelmarunko saattaa näyttää vaikeaselkoiselta! Jatkamme yhä ohjelmointia kommentilla <em>ohjelmakoodi</em> merkittyyn kohtaan.
</p>


<% partial 'partials/material_sub_heading' do %>
  Kokonaisluvun lukeminen
<% end %>

<p>
  Kokonaislukujen lukeminen tapahtuu lukemalla käyttäjältä syöterivi (komento <code>lukija.nextLine()</code>), joka annetaan komennolle <code>Integer.parseInt</code>. Komento <code>Integer.parseInt</code> muuntaa sille annetun syöterivin kokonaislukumuuttujaksi, olettaen että tämä on mahdollista.
</p>

<% partial 'partials/code_highlight' do %>
System.out.print("Anna kokonaisluku: ");
int kokonaisluku = Integer.parseInt(lukija.nextLine());

System.out.println("Annoit " + kokonaisluku);
<% end %>

<p>
  Jatkossa esimerkkitulostuksissa merkitään punaisella käyttäjän syöttämät arvot. Edeltävän ohjelman suoritus olisi seuraavanlainen, olettaen, että käyttäjä syöttää arvon 25.
</p>

<% partial 'partials/sample_output' do %>
Anna kokonaisluku: <font color="red">25</font>

Annoit 25
<% end %>



<div class="typonator-widget">
  <div class="typonator-model-source">
import java.util.Scanner;

public class Esimerkki {
    public static void main(String[] args) {
        // Luodaan lukemiseen käytettävä apuväline
        Scanner lukija = new Scanner(System.in);
    }
}
  </div>
  <div class="typonator-template-source">
import java.util.Scanner;

public class Esimerkki {
    public static void main(String[] args) {
        // Luodaan lukemiseen käytettävä apuväline
        // MARK
    }
}
  </div>
</div>

<div class="typonator-widget">
  <div class="typonator-model-source">
import java.util.Scanner;

public class Esimerkki {
    public static void main(String[] args) {
        // Luodaan lukemiseen käytettävä apuväline
        Scanner lukija = new Scanner(System.in);

        // Luetaan luku käyttäjältä ja tulostetaan se
        int luku = Integer.parseInt(lukija.nextLine());
        System.out.println(luku);
    }
}
  </div>
  <div class="typonator-template-source">
import java.util.Scanner;

public class Esimerkki {
    public static void main(String[] args) {
        // Luodaan lukemiseen käytettävä apuväline
        Scanner lukija = new Scanner(System.in);

        // Luetaan luku käyttäjältä ja tulostetaan se
        // MARK
    }
}
  </div>
</div>


<% partial 'partials/exercise', locals: { name: 'Syötetyn luvun tulostaja' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä lukua ja tulostaa syötetyn luvun arvon.
  </p>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">42</font>

Syötit: 42
  <% end %>

  <p>
    Esimerkin punaisella värjätty teksti tarkoittaa käyttäjän kirjoittamaa tekstiä.
  </p>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Kahden luvun summaaja' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kaksi kokonaislukua ja tulostaa niiden summan.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">6</font>
Anna toinen luku: <font color="red">2</font>

Lukujen summa: 8
  <% end %>

  <p>
    Kuten aiemminkin, esimerkin punaisella värjätty teksti tarkoittaa käyttäjän kirjoittamaa tekstiä.
  </p>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Kolmen luvun summaaja' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kolme kokonaislukua ja tulostaa niiden summan.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">2</font>
Anna kolmas luku: <font color="red">12</font>

Lukujen summa: 19
  <% end %>

  <p>
    Kuten aiemminkin, esimerkin punaisella värjätty teksti tarkoittaa käyttäjän kirjoittamaa tekstiä.
  </p>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Jakaja' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kaksi kokonaislukua ja tulostaa niiden osamäärän. Varmista, että <code>3 / 2 = 1.5</code>. Jos desimaaliosa katoaa, lue uudelleen Jakolaskuun liittyvä kohta materiaalista.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">3</font>
Anna toinen luku: <font color="red">2</font>

Jakolasku: 3 / 2 = 1.5
  <% end %>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Ympyrän kehän pituus' } do %>


  <p>
    Ympyrän kehän pituus lasketaan kaavalla <code>2 * pii * säde</code>. Tee ohjelma, joka kysyy käyttäjältä ympyrän säteen ja laskee sen perusteella ympyrän kehän pituuden. Voit käyttää joko omaa muuttujaa piin arvon tallentamiseen, tai voit käyttää Javan valmiiksi tarjoamaa piin arvoa. Javan valmiin piin arvon saa käyttöön kirjoittamalla <code>Math.PI</code> laskutoimitukseen.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ympyrän säde: <font color="red">20</font>

Ympyrän kehä: 125.66370614359172
  <% end %>

<% end %>



<% partial 'partials/material_heading' do %>
  Päätösten tekeminen
<% end %>

<p>
  Ohjelmamme ovat toistaiseksi edenneet suoraviivaisesti lauseesta seuraavaan, toimien jokaisella suorituskerralla samalla tavalla. Haluamme mahdollisuuden erilaisille ohjelman suorituspoluille.
</p>

<% partial 'partials/material_sub_heading' do %>
  Ehtolause
<% end %>

<p>
  Jotta ohjelman suoritus voisi <em>haarautua</em> esimerkiksi käyttäjän antaman syötteen perusteella, tarvitsemme käyttöömme <strong>ehtolauseen</strong>.
</p>

<p>
  Ehtolause alkaa avainsanalla <code>if</code>, jota seuraa sulut. Sulkujen sisälle asetetaan lauseke, joka evaluoidaan kun ehtolause saavutetaan. Sulkuja seuraa lohko, joka määritellään avaavan aaltosulun <code>{</code> ja sulkevan aaltosulun <code>}</code> sisään. Lohko suoritetaan jos sulkujen sisälle asetettu lauseke evaluoidaan todeksi.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 11;

if (luku &gt; 10) {
    System.out.println("Luku oli suurempi kuin 10");
}
<% end %>

<p>
  Jos ehtolauseen lauseke evaluoidaan todeksi, yllä "jos muuttujassa luku oleva arvo on suurempi kuin 10", ohjelman suoritus siirtyy ehtolauseen määrittelemään lohkoon. Jos taas lauseke on epätotta, ohjelman suoritus siirtyy ehtolauseeseen liittyvän lohkon päättävän aaltosulun jälkeiseen lauseeseen.
</p>

<p>
  Huomaa, että <code>if</code> -lauseen perään ei tule puolipistettä, sillä lause ei lopu ehto-osan jälkeen.
</p>



<div class="typonator-widget">
  <div class="typonator-model-source">
public class Esimerkki {
    public static void main(String[] args) {
        int luku = 11;
        if (luku > 10) {
            System.out.println("Luku oli suurempi kuin 10");
        }
    }
}
  </div>
  <div class="typonator-template-source">
public class Esimerkki {
    public static void main(String[] args) {
        // MARK
    }
}
  </div>
</div>


<% partial 'partials/hint', locals: { name: 'Ohjelmakoodin sisennys' } do %>


  <p>
    Lohkojen sisällä oleva koodi sisennetään. Esimerkiksi ehtolauseeseen liittyvän lohkon sisältämä lähdekoodi sisennetään neljä välilyöntiä sisemmälle kuin ehtolauseen aloittava <code>if</code>-komento. Neljä merkkiä saa myös tabulaattorimerkillä (q:n vasemmalla puolella oleva näppäin). Kun lohko sulkeutuu, eli tulee }-merkki, sisennys loppuu. }-merkki on samalla tasolla kuin ehtolauseen aloittanut <code>if</code>-komento.
  </p>

  <table class="table">
    <thead>
      <tr><th>Väärin</th><th>Oikein</th></tr>
    </thead>
    <tbody>
      <tr>
	<td>
          <% partial 'partials/code_highlight' do %>
if (luku &gt; 10) {
luku = 9;
}
	  <% end %>
	</td>
	<td>
<% partial 'partials/code_highlight' do %>
if (luku &gt; 10) {
    luku = 9;
}
<% end %>
	</td>
      </tr>
    </tbody>
  </table>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Ylinopeussakko' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun ja tulostaa merkkijonon "Ylinopeussakko!" jos luku on suurempi kuin 120.
  </p>

  <% partial 'partials/sample_output' do %>
    Kerro nopeus: <font color="red">15</font>
  <% end %>

  <% partial 'partials/sample_output' do %>
    Kerro nopeus: <font color="red">135</font>

    Ylinopeussakko!
  <% end %>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Vertailuoperaattorit
<% end %>


<p>
  Vertailuoperaattoreita ovat seuraavat:
</p>

<ul>
  <li><code>&gt;</code>suurempi kuin</li>
  <li><code>&gt;=</code>suurempi tai yhtäsuuri kuin</li>
  <li><code>&lt;</code>pienempi kuin</li>
  <li><code>&lt;=</code> pienempi tai yhtäsuuri kuin</li>
  <li><code>==</code> yhtäsuuri kuin</li>
  <li><code>!=</code> erisuuri kuin</li>
</ul>

<% partial 'partials/code_highlight' do %>
int luku = 55;

if (luku != 0) {
    System.out.println("Luku oli erisuuri kuin 0");
}

if (luku &gt;= 1000) {
    System.out.println("Luku oli vähintään 1000");
}
<% end %>


<% partial 'partials/exercise', locals: { name: 'Orwell' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun ja tulostaa merkkijonon "Orwell" jos luku on täsmälleen 1984.
  </p>

  <% partial 'partials/sample_output' do %>
    Anna luku: <font color="red">1983</font>
  <% end %>

  <% partial 'partials/sample_output' do %>
    Anna luku: <font color="red">1984</font>

    Orwell
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Wanha' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä vuosilukua. Jos käyttäjä syöttää luvun, joka on pienempi kuin 2015, ohjelma tulostaa merkkijonon "Wanha!".
  </p>

  <% partial 'partials/sample_output' do %>
Anna vuosiluku: <font color="red">2017</font>

  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosiluku: <font color="red">2013</font>

Wanha!
  <% end %>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Muulloin eli else
<% end %>

<p>
  Jos ehtolauseen sulkujen sisällä oleva lauseke evaluoituu epätodeksi, ohjelmakoodin suoritus siirtyy ehtolauseen lohkon lopettavan aaltosulun seuraavaan lauseeseen. Tämä ei aina ole toivottua, vaan usein halutaan luoda vaihtoehtoinen toiminta tilanteeseen, missä ehtolauseen lauseke on epätotta.
</p>

<p>
  Tämä onnistuu <code>if</code>-komennon yhteydessä käytettävän <code>else</code>-komennon avulla.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 4;

if (luku &gt; 5) {
    System.out.println("Lukusi on suurempi kuin viisi!");
} else {
    System.out.println("Lukusi on viisi tai alle!");
}
<% end %>

<% partial 'partials/sample_output' do %>
  Lukusi on viisi tai alle!
<% end %>

<p>
  Jos ehtolauseeseen on määritelty <code>else</code>-haara, suoritetaan else-haaran määrittelemä lohko jos ehtolauseen ehto ei ole totta. Komento <code>else</code> tulee samalle riville <code>if</code>-komennon määrittelemän lohkon lopettavan aaltosulun kanssa.
</p>

<p>
  Huom! Jos et sisennä em. tavalla, tyylitarkastaja valittaa "Line xx: '}' should be on the same line."
</p>

<% partial 'partials/exercise', locals: { name: 'Positiivinen luku' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun ja kertoo, onko se positiivinen (eli suurempi kuin nolla) vai ei.
  </p>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">5</font>

Luku on positiivinen.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">-2</font>

Luku ei ole positiivinen.
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Täysi-ikäisyys' } do %>

  <p>Tee ohjelma, joka kysyy käyttäjän ikää ja kertoo, onko tämä täysi-ikäinen (eli 18-vuotias tai vanhempi).</p>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">12</font>

Et ole täysi-ikäinen!
  <% end %>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">32</font>

Olet täysi-ikäinen!
  <% end %>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Lisää vaihtoehtoja: else if
<% end %>

<p>
  Jos vaihtoehtoja on useampia käytetään <code>else if</code>-komentoa. Komento <code>else if</code> on kuin <code>else</code>, mutta lisäehdolla. <code>else if</code> tulee <code>if</code>-ehdon jälkeen, ja niitä voi olla useita.</p>

<% partial 'partials/code_highlight' do %>
int luku = 3;

if (luku == 1) {
    System.out.println("Luku on yksi");
} else if (luku == 2) {
    System.out.println("Lukuna on kaksi");
} else if (luku == 3) {
    System.out.println("Kolme lienee lukuna!");
} else {
    System.out.println("Jotain muuta!");
}
<% end %>

<% partial 'partials/sample_output' do %>
  Kolme lienee lukuna!
<% end %>


<p>
  Luetaan ylläoleva esimerkki: 'Jos luku on yksi, tulosta "Luku on yksi", muuten jos luku on kaksi, tulosta "Lukuna on kaksi", muuten jos lukuna on kolme, tulosta "Kolme lienee lukuna!".  Muulloin, tulosta "Jotain muuta!"'.
</p>

<p>
  Ylläolevan ohjelman askeleittainen visualisointi:
</p>

<div class="code-states-visualizer-widget" data-input='{"code":"public class Esimerkki {\n  public static void main(String[] args) {\n    int luku = 3;\n    \n    if (luku == 1) {\n      System.out.println(\"Luku on yksi\");\n    } else if (luku == 2) {\n      System.out.println(\"Lukuna on kaksi\");\n    } else if (luku == 3) {\n      System.out.println(\"Kolme lienee lukuna!\");\n    } else {\n      System.out.println(\"Jotain muuta!\");\n    }\n  }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":5,"stack_to_render":[{"func_name":"main:5","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"4","frame_id":4}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":7,"stack_to_render":[{"func_name":"main:7","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"8","frame_id":8}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":9,"stack_to_render":[{"func_name":"main:9","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"12","frame_id":12}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":10,"stack_to_render":[{"func_name":"main:10","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"16","frame_id":16}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Kolme lienee lukuna!\n","event":"step_line","line":14,"stack_to_render":[{"func_name":"main:14","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"20","frame_id":20}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Kolme lienee lukuna!\n","event":"return","line":14,"stack_to_render":[{"func_name":"main:14","encoded_locals":{"luku":3,"__return__":["VOID"]},"ordered_varnames":["luku","__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"21","frame_id":21}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>


<% partial 'partials/exercise', locals: { name: 'Suurempi tai yhtäsuuri' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kaksi kokonaislukua ja tulostaa niistä suuremman. Jos luvut ovat yhtä suuret, ohjelma huomaa myös tämän.
  </p>

  <p>
    Esimerkkitulostuksia:
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">3</font>

Suurempi luku: 5
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">8</font>

Suurempi luku: 8
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">5</font>

Luvut ovat yhtä suuret!
  <% end %>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Vertailujen suoritusjärjestys
<% end %>

<p>
  Vertailut suoritetaan järjestyksessä ylhäältä alaspäin. Kun suorituksessa päästään ehtolauseeseen, jonka ehto on totta, suoritetaan lohko ja lopetetaan vertailu.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 5;

if (luku == 0) {
    System.out.println("Luku on nolla.");
} else if (luku &gt; 0) {
    System.out.println("Luku on suurempi kuin nolla.");
} else if (luku &gt; 2) {
    System.out.println("Luku on suurempi kuin kaksi.");
} else {
    System.out.println("Luku on pienempi kuin nolla.");
}
<% end %>

<% partial 'partials/sample_output' do %>
  Luku on suurempi kuin nolla.
<% end %>

<p>
  Yllä oleva esimerkki tulostaa merkkijonon "Luku on suurempi kuin nolla." vaikka myös ehto <code>luku &gt; 2</code> on totta. Vertailu lopetetaan ensimmäiseen valintakäskyyn, jonka ehto on totta.
</p>


<% partial 'partials/exercise', locals: { name: 'Arvosanat ja pisteet' } do %>

  <p>
    Tee ohjelma, joka ilmoittaa kurssiarvosanan seuraavan taulukon mukaisesti.
  </p>

  <table class="table">
    <tr>
      <th>pistemäärä</th>
      <th>arvosana</th>
    </tr>
    <tr>
      <td>&lt; 0</td>
      <td>mahdotonta!</td>
    </tr>
    <tr>
      <td>0-69</td>
      <td>hylätty</td>
    </tr>
    <tr>
      <td>70-75</td>
      <td>1</td>
    </tr>
    <tr>
      <td>76-80</td>
      <td>2</td>
    </tr>
    <tr>
      <td>81-85</td>
      <td>3</td>
    </tr>
    <tr>
      <td>86-90</td>
      <td>4</td>
    </tr>
    <tr>
      <td>91-100</td>
      <td>5</td>
    </tr>
    <tr>
      <td>&gt; 100</td>
      <td>uskomatonta!</td>
    </tr>
  </table>

  <p>
    Esimerkkitulostuksia:
  </p>

  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">37</font>

Arvosana: hylätty
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">76</font>

Arvosana: 2
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">95</font>

Arvosana: 5
  <% end %>


  <% partial 'partials/sample_output' do %>
    Anna pisteet [0-100]: <font color="red">-3</font>

    Arvosana: mahdotonta!
  <% end %>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Määrä' } do %>

  <p>
    Tehtävän graafiseen käyttöliittymään on lisätty liukuri sekä tekstikenttä.
  </p>

  <img class="naytto" src="/img/exercises/01-22-maara.png"/>

  <p>
  </p>

  <p>
    Tutustu ohjelman koodiin ja muokkaa ohjelmaa siten, että tekstikentän arvo muuttuu liukurista saatavien arvojen perusteella seuraavasti:
  </p>

  <ul>
    <li>Jos liukurin arvo on 0, tekstin tulee olla "Ei lainkaan."</li>
    <li>Jos liukurin arvo on 1-25, tekstin tulee olla "Vähän."</li>
    <li>Jos liukurin arvo on 26-74, tekstin tulee olla "Kohtalaisesti."</li>
    <li>Jos liukurin arvo on 75-99, tekstin tulee olla "Paljon."</li>
    <li>Jos liukurin arvo on 100, tekstin tulee olla "Kaikki."</li>
  </ul>

  <p>
    Huomaa, ettei ohjelmakoodista tarvitse ymmärtää kokonaisuudessaan -- opimme luomaan graafisia käyttöliittymiä Ohjelmoinnin jatkokurssilla.
  </p>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Ehtolauseen lauseke ja totuusarvomuuttuja
<% end %>


<p>
  Ehtolauseen sulkuihin asetettavan arvon tulee olla lausekkeen evaluoinnin jälkeen totuusarvotyyppinen. Totuusarvomuuttujan tyyppi on <code>boolean</code> ja arvo <em>true</em> tai <em>false</em>.
</p>

<% partial 'partials/code_highlight' do %>
boolean onkoTotta = true;
System.out.println("Totuusarvomuuttujan arvo on " + onkoTotta);
<% end %>

<% partial 'partials/sample_output' do %>
Totuusarvomuuttujan arvo on true
<% end %>

<p>
  Ehtolauseen voi suorittaa myös seuraavasti:
</p>

<% partial 'partials/code_highlight' do %>
boolean onkoTotta = true;

if (onkoTotta) {
    System.out.println("Aika vinhaa!");
}
<% end %>

<% partial 'partials/sample_output' do %>
Aika vinhaa!
<% end %>


<p>
  Vertailuoperaattoreita voi käyttää myös ehtojen ulkopuolella. Tällöin vertailun tuloksena saatu totuusarvo asetetaan talteen totuusarvomuuttujaan myöhempää käyttöä varten.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 1;
int toka = 3;

boolean onkoSuurempi = eka &gt; toka;
<% end %>

<p>
  Yllä olevassa esimerkissä totuusarvomuuttuja <code>onkoSuurempi</code> sisältää nyt totuusarvon <em>false</em>. Yllä olevaa esimerkkiä voi myös jatkaa ja ottaa siihen mukaan ehtolauseen.</p>

<% partial 'partials/code_highlight' do %>
int eka = 1;
int toka = 3;

boolean onkoPienempi = eka &lt; toka;

if (onkoPienempi) {
    System.out.println("1 on pienempi kuin 3!");
}
<% end %>

<img class="naytto" src="/img/drawings/boolean-muuttuja.png"/>

<p>
  Yllä olevassa kuvassa ohjelmakoodia on suoritettu niin pitkään, että ohjelman muuttujat on luotu ja niihin on asetettu arvot. Muuttujassa <code>onkoPienempi</code> on arvona <code>true</code>. Seuraavana suoritetaan vertailu <code>if (onkoPienempi) </code> -- muuttujaan <code>onkoPienempi</code> liittyvä arvo löytyy sen lokerosta, ja lopulta ohjelma tulostaa:
</p>


<% partial 'partials/sample_output' do %>
  1 on pienempi kuin 3!
<% end %>



<% partial 'partials/hint', locals: { name: 'Jakojäännös' } do %>

  <p>
    Jakojäännös on hieman harvemmin käytetty operaatio, joka on kuitenkin varsin näppärä kun halutaan tarkistaa esimerkiksi luvun jaollisuutta. Jakojäännösoperaation merkki on <code>%</code>.
  </p>

  <% partial 'partials/code_highlight' do %>
int jakojaannos = 7 % 2;
System.out.println(jakojaannos); // tulostaa 1

System.out.println(5 % 3); // tulostaa 2
System.out.println(7 % 4); // tulostaa 3
System.out.println(8 % 4); // tulostaa 0
System.out.println(1 % 2); // tulostaa 1
  <% end %>

  <p>
    Jos haluamme tietää onko käyttäjän syöttämä luku jaollinen neljälläsadalla, tarkastamme onko syötetyn luvun jakojäännös neljänsadan suhteen nolla.
  </p>


  <% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);
int luku = Integer.parseInt(lukija.nextLine());
int jakojaannos = luku % 400;

if (jakojaannos == 0) {
    System.out.println("Luku " + luku + " on jaollinen neljälläsadalla.");
} else {
    System.out.println("Luku " + luku + " ei ole jaollinen neljälläsadalla.");
}
  <% end %>

  <p>
    Koska jakojäännös on samanlainen operaatio kuin muutkin laskut, voi sen asettaa osaksi valintakäskyä.
  </p>


  <% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);
int luku = Integer.parseInt(lukija.nextLine());

if (luku % 400 == 0) {
    System.out.println("Luku " + luku + " on jaollinen neljälläsadalla.");
} else {
    System.out.println("Luku " + luku + " ei ole jaollinen neljälläsadalla.");
}
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Pariton vai parillinen' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä luvun ja ilmoittaa, onko syötetty luku parillinen vai pariton.
  </p>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">2</font>
Luku 2 on parillinen.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">7</font>
Luku 7 on pariton.
  <% end %>

  <p>
    Vihje: Luvun jakojäännös 2:lla kertoo, onko luku parillinen vai pariton. Jakojäännos taas saadaan <code>%</code>-operaattorilla, tehtäväpohjassa on lisää ohjeita miten parittomuustarkastus hoituu jakojäännöksen avulla.
  </p>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Karkausvuosi' } do %>


  <p>
    Vuosi on karkausvuosi, jos se on jaollinen 4:llä. Kuitenkin jos vuosi on jaollinen 100:lla, se on karkausvuosi vain silloin, kun se on jaollinen myös 400:lla.
  </p>

  <p>
    Tee ohjelma, joka lukee käyttäjältä vuosiluvun, ja tarkistaa, onko vuosi karkausvuosi.
  </p>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">2011</font>
Vuosi ei ole karkausvuosi.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">2012</font>
Vuosi on karkausvuosi.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">1800</font>
Vuosi ei ole karkausvuosi.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">2000</font>
Vuosi on karkausvuosi.
  <% end %>


  <p>
    Vihje: mieti ongelmaa if, else if, else if, ... -vertailujen ketjuna ja loita ohjelman rakentaminen tilanteesta, missä voit olla varma, että ohjelma ei ole karkausvuosi.
  </p>


  <% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);
int luku = Integer.parseInt(lukija.nextLine());

if (luku % 4 != 0) {
    System.out.println("Vuosi ei ole karkausvuosi.");
} else if (...) {
    ...
} ...
  <% end %>


<% end %>



<% partial 'partials/material_heading' do %>
  Toistaminen
<% end %>

<p>
  Tietokone on erittäin tehokas asioiden toistaja.
</p>


<% partial 'partials/material_sub_heading' do %>
  Toistolause ja ikuinen toisto
<% end %>

<p>
  Toistolause sisältää lausekkeen, jonka perusteella päätellään jatketaanko toistoa, sekä lohkon, joka sisältää toistettavan lähdekoodin. Toistolauseen muoto on seuraava.
</p>

<% partial 'partials/code_highlight' do %>
while (lauseke) {
    // lohkon sisältö
}
<% end %>

<p>
  Lausekkeen arvon tulee evaluoitua totuusarvoiseksi muuttujaksi. Jos lausekkeen arvoksi asettaa arvon <code>true</code>, toistoa jatketaan ikuisesti. Seuraava ohjelma tulostaa merkkijonoa <em>osaan ohjelmoida!</em> ikuisesti eli "äärettömän monta kertaa":
</p>

<% partial 'partials/code_highlight' do %>
while (true) {
    System.out.println("osaan ohjelmoida!");
}
<% end %>

<p>
  Ikuisen toiston sisältävä ohjelma ei sammu itsestään. Ohjelman sammutus tapahtuu NetBeansissa tulostusikkunan vasemmalla puolella olevaa punaista nappia painamalla.
</p>


<div class="typonator-widget">
  <div class="typonator-model-source">
public class Esimerkki {
    public static void main(String[] args) {
        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        while (true) {
            System.out.println("Uudestaan!");
        }
    }
}
  </div>
  <div class="typonator-template-source">
public class Esimerkki {
    public static void main(String[] args) {
        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        // MARK
    }
}
  </div>
</div>

<% partial 'partials/material_sub_heading' do %>
  Toistolauseen päättäminen
<% end %>

<p>
  Toistolauseen saa päätettyä komennolla <code>break</code>. Kun tietokone suorittaa komennon <code>break</code>, siirtyy se toistolauseen lohkoa seuraavan komennon suorittamiseen.
</p>

<% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);

while (true) {
    System.out.println("osaan ohjelmoida!");

    System.out.print("jatketaanko (positiivinen luku jatkaa)? ");
    int komento = Integer.parseInt(lukija.nextLine());
    if (komento &lt;= 0) {
        break;
    }
} // lohko päättyy

// toistolauseen lohkoa seuraava komento
System.out.println("kiitos ja kuulemiin.");
<% end %>


<p>
  Ylläolevassa esimerkissä toisto etenee siten että ensin tulostuu <em>osaan ohjelmoida!</em> ja tämän jälkeen ohjelma kysyy käyttäjältä jatketaanko vielä. Jos käyttäjä syöttää nollan tai negatiivisen luvun, suoritetaan komento <code>break</code>. Tällöin suoritus siirtyy toistolausetta seuraavaan komentoon, joka tulostaa merkkijonon <em>kiitos ja kuulemiin.</em>
</p>


<% partial 'partials/sample_output' do %>
osaan ohjelmoida!
jatketaanko (negatiivinen luku lopettaa)? <font color="red">5</font>
osaan ohjelmoida!
jatketaanko (negatiivinen luku lopettaa)? <font color="red">2</font>
osaan ohjelmoida!
jatketaanko (negatiivinen luku lopettaa)? <font color="red">-1</font>
kiitos ja kuulemiin.
<% end %>

<% partial 'partials/exercise', locals: { name: 'Uudestaan!' } do %>


  <p>
    Kirjoita edelläolevaa toistolause-esimerkkiä mukaillen ohjelma, joka kysyy käyttäjältä lukuja kunnes käyttäjä syöttää luvun 4.
  </p>

  <% partial 'partials/sample_output' do %>
    Syötä luku <font color="red">5</font>
    Syötä luku <font color="red">744</font>
    Syötä luku <font color="red">22</font>
    Syötä luku <font color="red">-1</font>
    Syötä luku <font color="red">4</font>
  <% end %>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Summaaja' } do %>

  <p>
    Tehtäväpohjassa on toistolausetta käyttävä ohjelma, joka lukee käyttäjältä viisi lukua ja tulostaa niiden summan. Muokkaa ohjelmaa siten, että ohjelma voi lukea lähes rajattoman määrän lukuja: lukeminen tulee lopettaa vasta kun käyttäjä syöttää luvun 0.
  </p>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Suurin syötetty luku' } do %>


  <p>
    Toteuta tehtäväpohjassa olevaan ohjelmaan toiminnallisuus, joka lukee lukuja kunnes käyttäjä syöttää nollan. Ohjelma pitää kirjaa suurimmasta syötetystä luvusta, ja tulostaa sen kun lukujen lukeminen lopetetaan.
  </p>

  <% partial 'partials/code_highlight' do %>
    // kannattanee harkita seuraavanlaista runkoa:
    // 1. Luodaan lukemiseen tarkoitettu Scanner-apuväline
    // 2. Luodaan muuttuja, joka pitää kirjaa suurimmasta luvusta
    // 3. Luodaan toistolause, jossa luetaan käyttäjältä lukuja.
    // 3.1. Toistolauseesta poistutaan jos käyttäjä syöttää luvun 0.
    // 3.2. Jos käyttäjän syöttämä luku on suurempi kuin suurimmasta luvusta
    //      kirjaa pitävän muuttujan arvo, asetetaan luettu suurimmaksi
    // 4. Tulostetaan lopuksi suurin luku
    Scanner lukija = new Scanner(System.in);
    int suurin = 0;

    // Toteuta tähän kohta 3 ja sen alikohdat

    System.out.println("Suurin syötetty luku oli " + suurin);
  <% end %>

  <p>
    Voit olettaa ohjelmaa tehdessäsi, että käyttäjä syöttää aina vähintään luvun 0.
  </p>

<% end %>



<% partial 'partials/material_heading' do %>
  Yhteenveto
<% end %>

<p>
  Ohjelmoinnin perusteiden ensimmäinen osa käsitteli ohjelmoinnin ja tietokoneiden toiminnan kannalta oleellisia ydinasioita. Näitä ovat muuttujat ja tieto, laskeminen, syötteen käsittely ja lukeminen, vertailu ja päätösten tekeminen sekä toistaminen. Alla on vielä muutamia kertaustehtäviä aiheeseen liittyen.
</p>

<p>
  <me>
    Alla olevissa kertaustehtävissä ei ole automaattisia testejä, joilta saisit palautetta ohjelmasi toiminnasta. Kokeile aina ennen tehtävän palauttamista, että ohjelmasi toimii toivotusti.
  </me>
</p>


<% partial 'partials/exercise', locals: { name: 'Työntekijän eläkevakuutus' } do %>

  <p>
    Työntekijän eläkevakuutus (TyEL) on lakisääteinen ja pakollinen maksu, jolla rahoitetaan suurin osa nykyisistä ja tulevista työeläkkeistä. Työntekijän eläkevakuutuksen maksamisesta vastaa sekä työnantaja että työntekijä: <a href="http://www.etk.fi/uutinen/tyoelakemaksut-vuonna-2017/" target="_blank">Eläketurvakeskuksen mukaan</a> työnantajan maksama TyEL-maksu on vuonna 2017 noin 18% työntekijän palkasta, kun taas työntekijä maksaa palkastaan TyEL-maksua noin 6%.
  </p>

  <p>
    Työnantaja maksaa osuutensa bruttopalkan lisäksi, kun taas työntekijän maksama osuus otetaan bruttopalkasta (eli palkasta ennen ennakonpidätyksiä, vakuutusmaksuja ja muita vähennyksiä).
  </p>

  <p>
    Toteuta ohjelma, joka kertoo TyEL-kulut annetulle bruttopalkalle. Ohjelman tulee kertoa annetun bruttopalkan perusteella työnantajan maksut sekä palkasta tehtävät pidätykset. Käytä edellä annettuja arvioita (työnantajan osuus 18% ja työntekijän osuus 6%).
  </p>

  <% partial 'partials/sample_output' do %>
    Syötä bruttopalkka: <font color="red">800</font>
    Työnantaja maksaa TyEL-maksuja: 144
    Työntekijä maksaa työnantajalle vähintään: 944

    Työntekijä maksaa TyEL-maksuja: 48
    Työntekijän palkka TyEL-maksun jälkeen: 752

    TyEL-kulut yhteensä: 192
  <% end %>


  <% partial 'partials/sample_output' do %>
    Syötä bruttopalkka: <font color="red">1000</font>
    Työnantaja maksaa TyEL-maksuja: 180
    Työntekijä maksaa työnantajalle vähintään: 1180

    Työntekijä maksaa TyEL-maksuja: 60
    Työntekijän palkka TyEL-maksun jälkeen: 940

    TyEL-kulut yhteensä: 240
  <% end %>
<% end %>


<% partial 'partials/exercise', locals: { name: 'Reilut pitsabileet' } do %>

  <p>
    Nea ja Vilma järjestävät reiluja pitsabileitä. Reilut pitsabileet ovat kuin normaalit pitsabileet, mutta reiluissa pitsabileissä kaikki saavat täsmälleen saman määrän pitsapaloja. Tehtävänäsi on kirjoittaa ohjelma, joka laskee ylijäävien pitsan palojen määrän.
  </p>

  <% partial 'partials/sample_output' do %>
    Montako osallistujaa? <font color="red">5</font>
    Montako pitsaa? <font color="red">2</font>
    Montako palaa per pitsa? <font color="red">6</font>
    
    Paloja jää yli: 2
  <% end %>

  <% partial 'partials/sample_output' do %>
    Montako osallistujaa? <font color="red">14</font>
    Montako pitsaa? <font color="red">2</font>
    Montako palaa per pitsa? <font color="red">6</font>
    
    Paloja jää yli: 12
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Lukujen keskiarvo' } do %>

  <p>
    Tehtävänannossa tulee käyttäjän syöttämien lukujen summan laskeva ohjelma. Ohjelma kysyy lukuja kunnes käyttäjä syöttää nollan. Tämän jälkeen lukujen lukeminen loppuu, ja ohjelma tulostaa lukujen summan luvun.
  </p>

  <p>
    Muokkaa ohjelmaa siten, että ohjelma tulostaa syötettyjen lukujen summa lisäksi syötettyjen lukujen keskiarvon.
  </p>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Salapaikka ranskassa' } do %>

  <p>
    Kameralta kuvien kopioimiseen tarkoitetun ohjelmiston toteuttaja löysi ohjelmastaan virheen, jonka lopputulos näkyy tehtäväpohjassa olevan ohjelman näyttämässä kuvassa. Ohjelmiston toteuttaja kertoo seuraavaa.
  </p>
  
  <p>
    "Tämä virhe oli aika harmittava. Se muutti kaikki siniset ja vihreät väriarvot pelkäksi kohinaksi, joten niistä ei ole mitään iloa eikä niitä saa koskaan takaisin kuvaan. Lisäksi punaisen värin määrä jokaisessa pikselissä jakautui noin kymmenellä kopioinnin yhteydessä, joten kuvan punainen väri on aivan liian tumma."
  </p>

  <p>
    Selvitä kopiointiohjelmiston mitä kuvassa näkyy ja mistä kuva on otettu. Tietokoneella kuvatiedostoja käsitellään yleensä <a href="https://fi.wikipedia.org/wiki/RGB-v%C3%A4rimalli" target="_blank" norel>RGB-värimallin</a> kautta. Tässä tapauksessa jokaisen värin arvo on välillä 0-1, ja jokainen väriarvo esitetään desimaalilukuna.
  </p>
    

<% end %>



<%= partial 'partials/quiz', locals: { id: '59ad9e2c98b5730004cda2af' } %>

<%= partial 'partials/quiz', locals: { id: '587a99b46b66090004e96c08' } %>
